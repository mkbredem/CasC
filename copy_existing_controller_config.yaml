---
- hosts: localhost
  gather_facts: false
  # Play example from: https://github.com/redhat-cop/controller_configuration/tree/devel/roles/filetree_create

  vars:
    # pulling from variables in group_vars/all/controller_creds.yml
    controller_username: "{{ vault_controller_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
    controller_password: "{{ vault_controller_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
    controller_hostname: "{{ vault_controller_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
    controller_validate_certs: "{{ vault_controller_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
    # by default input_tag is ['organization', 'project']
    input_tag: 
      - all
      - settings
      - credentials
      - credential_types
      - execution_environments
      - groups
      - hosts
      - inventory
      - inventory_sources
      - job_templates
      - notification_templates
      - organizations
      - projects
      - roles
      - teams
      - users
      - workflow_job_templates
      - instance_groups
      - applications
      - labels


  pre_tasks:
    - name: "Setup authentication (block)"
      block:
        - name: "Get the Authentication Token for the future requests"
          ansible.builtin.uri:
            url: "https://{{ controller_hostname }}/api/v2/tokens/"
            user: "{{ controller_username }}"
            password: "{{ controller_password }}"
            method: POST
            force_basic_auth: true
            validate_certs: "{{ controller_validate_certs }}"
            status_code: 201
          register: authtoken_res

        - name: "Set the oauth token to be used since now"
          ansible.builtin.set_fact:
            controller_oauthtoken: "{{ authtoken_res.json.token }}"
            controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
      no_log: "{{ controller_configuration_filetree_create_secure_logging | default('false') }}"
      when: controller_oauthtoken is not defined
      tags:
        - always

  roles:
    - redhat_cop.controller_configuration.filetree_create

  post_tasks:
    - name: view files from /tmp/filetree_output to web_server
      command: touch {{ output_path }}/test.txt
      tags: test

    - name: Add host to play
      ansible.builtin.add_host:
        hostname: "{{ web_server }}"
      tags: test

    - name: ping new host
      ping:
      delegate_to: "{{ web_server }}"
      tags: test
    
    - name: Change the working directory to somedir/ before executing the command
      ansible.builtin.shell: pwd
      args:
        chdir: /home/ec2-user
      delegate_to: "{{ web_server }}"

    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /home/{{ web_server_user }}/controller_filetree
        state: directory
        # mode: '0755'
        # owner: "{{ web_server_user }}"
        # group: "{{ web_server_user }}"
      delegate_to: "{{ web_server }}"
#
#    - name:  Synchronization using rsync protocol on delegate host (push)
#      ansible.posix.synchronize:
#        src: "{{ output_path }}"
#        dest: rsync://{{ web_server_user }}/home/{{ web_server_user }}/controller_filetree/
#      delegate_to: {{ web_server_user }}
#
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: "{{ output_path }}"
        dest: /home/{{ web_server_user }}/controller_filetree
        mode: '0755'
        owner: "{{ web_server_user }}"
        group: "{{ web_server_user }}"
      delegate_to: "{{ web_server }}"

    - name: "Delete the Authentication Token used"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: DELETE
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 204
      when: controller_oauthtoken_url is defined